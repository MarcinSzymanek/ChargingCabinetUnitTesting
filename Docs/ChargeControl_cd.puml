@startuml ChargeControl_cd

enum StateID{
    NO_DEVICE
    FULLY_CHARGED
    CHARGING
    ERROR
}

class ChargeControl{
    + event EventHandler<ChargingEventArgs> ErrorEvent
    - BaseState _state
    + void ChangeState(BaseState)
    + bool DeviceConnected()
    + int StartCharge()
    + int StopCharge()
    + void OnCurrentEvent()
}

class BaseState{
    + enum StateID StateId
    + string DisplayMessage
    # void MonitorCurrentEvent(double current)
    + void StopCharge()

}

interface IUSBCharger{
    + event CurrentEvent
    + int StartCharging()
    + int StopCharging()
}

interface IDisplay{
    SetChargingMessage(string msg)
}

interface IStationControl{
    + void OnChargingError()
}

interface IChargeControl{

}

class StateCharging{
    # override void MonitorCurrentEvent(double)
}

class StateFullyCharged{
    # override void MonitorCurrentEvent(double)
}

IStationControl --> ChargeControl
ChargeControl --> IDisplay
ChargeControl --> IUSBCharger
ChargeControl --|> IChargeControl
BaseState --* ChargeControl
BaseState <|-- StateCharging
BaseState <|-- StateError
BaseState <|-- StateReady
BaseState <|-- StateFullyCharged
ChargeControl --> StateReady


@enduml
